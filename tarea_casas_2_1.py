# -*- coding: utf-8 -*-
"""tarea_casas_2.1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14NCI1ZQiACTGgWTtrwAWItgP6lbeNcXY
"""

import pandas as pd
import seaborn as sb
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler

datos = pd.read_csv('U4_01_housing.csv')



#Aqui eliminamos filas con valores nulos

datos_na = datos.dropna()

# Creamos las variables dummy para 'ocean_proximity' y eliminar la primera columna
dummies = pd.get_dummies(datos_na['ocean_proximity'], dtype=int, drop_first=True)
datos_na = pd.concat([datos_na, dummies], axis=1).drop(['ocean_proximity'], axis=1)

# Visualizar la matriz de correlación
sb.set(rc={'figure.figsize': (15, 8)})
sb.heatmap(data=datos_na.corr(), annot=True, cmap='YlGnBu')

# Crear una nueva característica: 'median_house_value_median_income_ratio'
datos_na['median_house_value_median_income_ratio'] = datos_na['median_house_value'] / datos_na['median_income']

# Dividir los datos en características (X) y variable objetivo (y)
X = datos_na.drop(['median_house_value'], axis=1)
y = datos_na['median_house_value']

# Dividir los conjuntos de datos en entrenamiento y prueba
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)

# Escalamos las características
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler(with_mean=False, with_std=False)
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

#entrenar el modelo
from sklearn.linear_model import LinearRegression

modelo = LinearRegression()
modelo.fit(X_train_scaled, y_train) # ocurre el entrenamiento

# reralizar las predicciones
predicciones = modelo.predict(X_test_scaled)

# Comparar predicciones con los valores reales
comparativa = {'Predicciones': predicciones, 'Valor Original': y_test}
df_comparativa = pd.DataFrame(comparativa)

# Mostrar el coeficiente de determinación R² en el conjunto de prueba y entrenamiento
precision_test = modelo.score(X_test_scaled, y_test)
precision_train = modelo.score(X_train_scaled, y_train)

print(f'Coeficiente de determinación (R²) en el conjunto de prueba: {precision_test:.4f}')
print(f'Coeficiente de determinación (R²) en el conjunto de entrenamiento: {precision_train:.4f}')

modelo.score(X_test, y_test)

modelo.score(X_train, y_train)

"""**¿El resultado fue mejor o peor?**
La precisión del modelo pasó de un 64% a un 84%, lo cual indica una mejora significativa en su capacidad para hacer predicciones precisas.

**¿Por qué crees que es así?**
La mejora en la precisión del modelo se debe a que se agrego una nueva caracteristica, se eliminaron caracteristicas irrelevantes que no tenian correlacion y hubo un mejor escalamiento
"""