# -*- coding: utf-8 -*-
"""Tarea_Arbol_3_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b5yXniZ9mDKufvAVo4Xv8gLBzJYeaNs7
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor, plot_tree
from sklearn.metrics import mean_squared_error
import seaborn as sb
import numpy as np

datos = pd.read_csv('U4_01_housing.csv')

datos.head()
datos.value_counts('ocean_proximity')
datos.info()

datos.hist(figsize=(15, 8), bins=30, edgecolor='black')

datos_na = datos.dropna()
datos_na.info()

dummies = pd.get_dummies(datos_na['ocean_proximity'], dtype=int)
datos_na = datos_na.join(dummies)
datos_na = datos_na.drop(['ocean_proximity'], axis=1)
datos_na.corr()

sb.set(rc={'figure.figsize':(15, 8)})
sb.heatmap(data=datos_na.corr(), annot=True, cmap='YlGnBu')

datos.corr()['median_house_value'].sort_values(ascending=False)

sb.scatterplot(x=datos_na['median_house_value'], y=datos_na['median_income'])

datos_na['room_ratio'] = datos_na['total_bedrooms'] / datos_na['total_rooms']
sb.set(rc={'figure.figsize':(15, 8)})
sb.heatmap(data=datos_na.corr(), annot=True, cmap='YlGnBu')

X = datos_na.drop(['median_house_value'], axis=1)
y = datos_na['median_house_value']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.2)

from sklearn.tree import DecisionTreeRegressor

arbol_modelo = DecisionTreeRegressor(max_depth=10, random_state=42)
arbol_modelo.fit(X_train, y_train)
arbol_pred = arbol_modelo.predict(X_test)

arbol_train_score = arbol_modelo.score(X_train, y_train)
arbol_test_score = arbol_modelo.score(X_test, y_test)

arbol_mse = mean_squared_error(y_test, arbol_pred)
arbol_rmse = np.sqrt(arbol_mse)

print(f"Rendimiento del árbol en conjunto de entrenamiento: {arbol_train_score}")
print(f"Rendimiento del árbol en conjunto de prueba: {arbol_test_score}")
print(f"RMSE del árbol: {arbol_rmse}")

plt.figure(figsize=(20, 10))
plot_tree(arbol_modelo, feature_names=X.columns, filled=True, rounded=True, fontsize=8)
plt.show()